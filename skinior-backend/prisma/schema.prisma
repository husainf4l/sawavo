// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id             String  @id @default(uuid())
  title          String
  titleAr        String?
  slug           String  @unique
  descriptionEn  String?
  descriptionAr  String?
  price          Float
  compareAtPrice Float? // For discount pricing (was JOD 60.00)
  currency       String  @default("JOD")
  sku            String? @unique
  barcode        String? @unique // Product barcode
  isActive       Boolean @default(true)
  isFeatured     Boolean @default(false)
  isNew          Boolean @default(false)

  // Skincare specific fields
  activeIngredients String? // "25% Vitamin C", "20% Niacinamide"
  skinType          String? // "All skin types", "Sensitive", etc.
  concerns          String? // JSON array of skin concerns this addresses
  usage             String? // "Morning", "Night", "AM/PM"

  // Detailed product information
  features      String? // JSON array of product features
  ingredients   String? // Detailed ingredients list
  howToUse      String? // Usage instructions
  featuresAr    String? // Arabic features
  ingredientsAr String? // Arabic ingredients
  howToUseAr    String? // Arabic usage instructions

  // SEO and content
  metaTitle       String?
  metaDescription String?

  // Inventory
  stockQuantity Int @default(0)

  // Analytics
  viewCount  Int @default(0)
  salesCount Int @default(0)

  // Relations
  images          ProductImage[]
  reviews         ProductReview[]
  cartItems       CartItem[]
  attributeValues ProductAttribute_Product[] // Product variants/attributes
  categoryId      String?
  category        Category?                  @relation(fields: [categoryId], references: [id])
  brandId         String?
  brand           Brand?                     @relation(fields: [brandId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id            String    @id @default(uuid())
  name          String
  nameAr        String?
  slug          String    @unique
  description   String?
  descriptionAr String?
  logo          String? // URL to brand logo
  website       String? // Brand website URL
  isActive      Boolean   @default(true)
  products      Product[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Category {
  id          String     @id @default(uuid())
  name        String
  nameAr      String?
  slug        String     @unique
  description String?
  parentId    String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  createdAt   DateTime   @default(now())
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  altText   String?
  isMain    Boolean  @default(false)
  isHover   Boolean  @default(false) // For hover effect images
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
}

model ProductReview {
  id           String   @id @default(uuid())
  productId    String
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId       String? // Optional - allow anonymous reviews
  customerName String? // For anonymous reviews
  email        String?
  rating       Int // 1-5 stars
  title        String?
  comment      String?
  isVerified   Boolean  @default(false) // Verified purchase
  isPublished  Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  password       String? // Optional for system users
  firstName      String?
  lastName       String?
  phone          String?
  role           String    @default("customer") // customer, admin, agent
  isActive       Boolean   @default(true)
  isSystem       Boolean   @default(false) // For agent/system users
  apiKey         String?   @unique // For agent authentication
  tokenExpiresAt DateTime? // For long-term tokens
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// Product Attributes System
model ProductAttribute {
  id          String  @id @default(uuid())
  name        String // "Color", "Size", "Type", etc.
  nameAr      String? // Arabic name
  slug        String  @unique // "color", "size", "type"
  description String?
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)

  // Relations
  values ProductAttributeValue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([sortOrder])
}

model ProductAttributeValue {
  id          String           @id @default(uuid())
  attributeId String
  attribute   ProductAttribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  value       String // "Dark Brown", "Black", "30ml", etc.
  valueAr     String? // Arabic value
  slug        String // "dark-brown", "black", "30ml"
  hexColor    String? // For color attributes: "#8B4513"
  image       String? // Image URL for this attribute value
  description String?
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)

  // Price adjustments for this variant
  priceAdjustment Float @default(0) // +/- amount from base product price
  stockQuantity   Int   @default(0) // Stock for this specific variant

  // Relations
  products ProductAttribute_Product[] @relation("AttributeValueProducts")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([attributeId, slug])
  @@index([attributeId])
  @@index([slug])
  @@index([sortOrder])
}

// Junction table for Product-AttributeValue many-to-many relationship
model ProductAttribute_Product {
  id                      String                @id @default(uuid())
  productId               String
  product                 Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  productAttributeValueId String
  attributeValue          ProductAttributeValue @relation("AttributeValueProducts", fields: [productAttributeValueId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([productId, productAttributeValueId])
  @@index([productId])
  @@index([productAttributeValueId])
}

model Order {
  id            String  @id @default(uuid())
  orderNumber   String  @unique
  userId        String?
  customerEmail String?
  customerName  String?
  status        String  @default("pending") // pending, confirmed, shipped, delivered, cancelled
  paymentMethod String  @default("stripe") // stripe, cod
  paymentStatus String  @default("pending") // pending, paid, failed, cod_pending
  subtotal      Float
  tax           Float   @default(0)
  shipping      Float   @default(0)
  total         Float
  currency      String  @default("JOD")

  // Shipping address
  shippingAddress String?
  shippingCity    String?
  shippingPhone   String?

  // Payment details
  stripePaymentIntentId String?
  codNotes              String? // Special notes for COD orders

  items     OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  title     String // Product title at time of order
  sku       String?
  price     Float // Price at time of order
  quantity  Int
  total     Float
  createdAt DateTime @default(now())
}

model Cart {
  id           String     @id @default(uuid())
  customerId   String?
  currency     String     @default("USD")
  discountCode String?
  items        CartItem[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  expiresAt    DateTime   @default(dbgenerated("NOW() + INTERVAL '30 days'"))

  @@index([customerId])
  @@index([expiresAt])
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  unitPrice Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
  @@index([cartId])
}

model DiscountCode {
  id            String    @id @default(uuid())
  code          String    @unique
  type          String // 'percentage' or 'fixed'
  value         Float // Percentage (10 = 10%) or amount
  minimumAmount Float     @default(0)
  usageLimit    Int?
  usageCount    Int       @default(0)
  startsAt      DateTime?
  endsAt        DateTime?
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())

  @@index([code])
}

// Room and LiveKit Models
model LiveKitRoom {
  id        String   @id @default(uuid())
  name      String   @unique
  metadata  Json? // JSON metadata for the room
  createdBy String? // User ID who created the room
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Analysis Sessions for Agent16 Integration
model AnalysisSession {
  id          String    @id @default(uuid())
  userId      String
  sessionId   String    @unique
  language    String    @default("english")
  status      String    @default("in_progress") // in_progress, completed, cancelled
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  // Relations
  analysisData           AnalysisData[]
  productRecommendations ProductRecommendation[]

  @@index([userId])
  @@index([status])
  @@index([sessionId])
}

// Analysis Data Storage
model AnalysisData {
  id           String   @id @default(uuid())
  userId       String
  analysisId   String
  analysisType String
  data         Json
  timestamp    DateTime @default(now())

  // Relations
  analysisSession AnalysisSession @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([analysisId])
  @@index([analysisType])
}

// Product Recommendations from Analysis
model ProductRecommendation {
  id                String   @id @default(uuid())
  userId            String
  analysisId        String
  productId         String
  productName       String
  brand             String?
  category          String?
  ingredients       String[] // Array of ingredients
  price             Float?
  currency          String   @default("USD")
  rating            Float?
  reviewCount       Int      @default(0)
  reason            String?
  usageInstructions String?
  priority          String   @default("medium") // high, medium, low
  availability      Boolean  @default(true)
  skiniorUrl        String?
  status            String   @default("pending") // pending, purchased, tried, not_interested, wishlist
  userNotes         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  analysisSession AnalysisSession @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([analysisId])
  @@index([status])
  @@index([productId])
}

// Blog Models
model BlogPost {
  id               String    @id @default(uuid())
  titleEn          String
  titleAr          String
  slugEn           String
  slugAr           String
  excerptEn        String
  excerptAr        String
  contentEn        String    @db.Text
  contentAr        String    @db.Text
  featuredImage    String
  images           String[] // Array of image URLs
  publishedAt      DateTime?
  readTimeEn       String // e.g., "5 min read"
  readTimeAr       String // e.g., "5 دقائق قراءة"
  featured         Boolean   @default(false)
  published        Boolean   @default(false)
  seoTitleEn       String?
  seoTitleAr       String?
  seoDescriptionEn String?
  seoDescriptionAr String?
  views            Int       @default(0)
  likes            Int       @default(0)
  commentsCount    Int       @default(0)

  // Relations
  categoryId     String
  category       BlogCategory   @relation(fields: [categoryId], references: [id])
  authorId       String
  author         BlogAuthor     @relation(fields: [authorId], references: [id])
  tags           BlogPostTag[]
  comments       BlogComment[]
  likes_relation BlogPostLike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([slugEn])
  @@unique([slugAr])
  @@index([published])
  @@index([featured])
  @@index([publishedAt])
  @@index([categoryId])
  @@index([authorId])
}

model BlogCategory {
  id            String     @id @default(uuid())
  nameEn        String
  nameAr        String
  slugEn        String     @unique
  slugAr        String     @unique
  descriptionEn String?
  descriptionAr String?
  color         String? // hex color for UI
  posts         BlogPost[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model BlogAuthor {
  id          String     @id @default(uuid())
  nameEn      String
  nameAr      String
  avatar      String // URL to image
  bioEn       String
  bioAr       String
  email       String?
  socialLinks Json? // JSON object for social media links
  posts       BlogPost[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model BlogTag {
  id        String        @id @default(uuid())
  nameEn    String
  nameAr    String
  slugEn    String        @unique
  slugAr    String        @unique
  posts     BlogPostTag[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model BlogPostTag {
  id     String   @id @default(uuid())
  postId String
  tagId  String
  post   BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    BlogTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@index([postId])
  @@index([tagId])
}

model BlogComment {
  id           String  @id @default(uuid())
  content      String  @db.Text
  authorName   String
  authorAvatar String?
  authorEmail  String?
  postId       String
  parentId     String?
  likes        Int     @default(0)

  // Relations
  post    BlogPost      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent  BlogComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies BlogComment[] @relation("CommentReplies")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([parentId])
}

model BlogPostLike {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model BlogNewsletterSubscriber {
  id           String   @id @default(uuid())
  email        String   @unique
  locale       String // 'en' or 'ar'
  active       Boolean  @default(true)
  subscribedAt DateTime @default(now())

  @@index([email])
  @@index([active])
}

// Import Log for tracking Excel/CSV imports
model ImportLog {
  id            String    @id @default(uuid())
  fileName      String
  status        String // 'pending', 'processing', 'completed', 'failed'
  totalRows     Int       @default(0)
  processedRows Int       @default(0)
  successRows   Int       @default(0)
  errorRows     Int       @default(0)
  errors        Json? // Array of error messages
  metadata      Json? // Additional import metadata
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  completedAt   DateTime?

  @@index([status])
  @@index([createdAt])
}

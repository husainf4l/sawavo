// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id             String  @id @default(uuid())
  title          String
  titleAr        String?
  slug           String  @unique
  descriptionEn  String?
  descriptionAr  String?
  price          Float
  compareAtPrice Float? // For discount pricing (was JOD 60.00)
  currency       String  @default("JOD")
  sku            String? @unique
  isActive       Boolean @default(true)
  isFeatured     Boolean @default(false)
  isNew          Boolean @default(false)

  // Skincare specific fields
  activeIngredients String? // "25% Vitamin C", "20% Niacinamide"
  skinType          String? // "All skin types", "Sensitive", etc.
  concerns          String? // JSON array of skin concerns this addresses
  usage             String? // "Morning", "Night", "AM/PM"

  // Detailed product information
  features      String? // JSON array of product features
  ingredients   String? // Detailed ingredients list
  howToUse      String? // Usage instructions
  featuresAr    String? // Arabic features
  ingredientsAr String? // Arabic ingredients
  howToUseAr    String? // Arabic usage instructions

  // SEO and content
  metaTitle       String?
  metaDescription String?

  // Inventory
  stockQuantity Int @default(0)

  // Analytics
  viewCount  Int @default(0)
  salesCount Int @default(0)

  // Relations
  images     ProductImage[]
  reviews    ProductReview[]
  cartItems  CartItem[]
  categoryId String?
  category   Category?       @relation(fields: [categoryId], references: [id])
  brandId    String?
  brand      Brand?          @relation(fields: [brandId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id            String    @id @default(uuid())
  name          String
  nameAr        String?
  slug          String    @unique
  description   String?
  descriptionAr String?
  logo          String? // URL to brand logo
  website       String? // Brand website URL
  isActive      Boolean   @default(true)
  products      Product[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Category {
  id          String     @id @default(uuid())
  name        String
  nameAr      String?
  slug        String     @unique
  description String?
  parentId    String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  createdAt   DateTime   @default(now())
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  altText   String?
  isMain    Boolean  @default(false)
  isHover   Boolean  @default(false) // For hover effect images
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
}

model ProductReview {
  id           String   @id @default(uuid())
  productId    String
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId       String? // Optional - allow anonymous reviews
  customerName String? // For anonymous reviews
  email        String?
  rating       Int // 1-5 stars
  title        String?
  comment      String?
  isVerified   Boolean  @default(false) // Verified purchase
  isPublished  Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  phone     String?
  role      String   @default("customer") // customer, admin
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id            String  @id @default(uuid())
  orderNumber   String  @unique
  userId        String?
  customerEmail String?
  customerName  String?
  status        String  @default("pending") // pending, confirmed, shipped, delivered, cancelled
  paymentMethod String  @default("stripe") // stripe, cod
  paymentStatus String  @default("pending") // pending, paid, failed, cod_pending
  subtotal      Float
  tax           Float   @default(0)
  shipping      Float   @default(0)
  total         Float
  currency      String  @default("JOD")

  // Shipping address
  shippingAddress String?
  shippingCity    String?
  shippingPhone   String?

  // Payment details
  stripePaymentIntentId String?
  codNotes              String? // Special notes for COD orders

  items     OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  title     String // Product title at time of order
  sku       String?
  price     Float // Price at time of order
  quantity  Int
  total     Float
  createdAt DateTime @default(now())
}

model Cart {
  id           String     @id @default(uuid())
  customerId   String?
  currency     String     @default("USD")
  discountCode String?
  items        CartItem[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  expiresAt    DateTime   @default(dbgenerated("NOW() + INTERVAL '30 days'"))

  @@index([customerId])
  @@index([expiresAt])
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  unitPrice Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
  @@index([cartId])
}

model DiscountCode {
  id            String    @id @default(uuid())
  code          String    @unique
  type          String // 'percentage' or 'fixed'
  value         Float // Percentage (10 = 10%) or amount
  minimumAmount Float     @default(0)
  usageLimit    Int?
  usageCount    Int       @default(0)
  startsAt      DateTime?
  endsAt        DateTime?
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())

  @@index([code])
}

// Room and LiveKit Models
model LiveKitRoom {
  id        String   @id @default(uuid())
  name      String   @unique
  metadata  Json? // JSON metadata for the room
  createdBy String? // User ID who created the room
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
